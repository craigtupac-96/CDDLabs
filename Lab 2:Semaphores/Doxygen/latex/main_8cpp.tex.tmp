\hypertarget{main_8cpp}{}\section{main.\+cpp File Reference}
\label{main_8cpp}\index{main.\+cpp@{main.\+cpp}}


A documented file.  


{\ttfamily \#include \char`\"{}Semaphore.\+h\char`\"{}}\newline
{\ttfamily \#include $<$iostream$>$}\newline
{\ttfamily \#include $<$thread$>$}\newline
{\ttfamily \#include $<$unistd.\+h$>$}\newline
Include dependency graph for main.\+cpp\+:
% FIG 0
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
void \hyperlink{main_8cpp_a2b4729d561c345111ccab970fe11e229}{task\+One} (std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$ the\+Semaphore, int delay)
\begin{DoxyCompactList}\small\item\em Displays a message first. To allow the task\+Two function to run its code this function must call the Signal. \end{DoxyCompactList}\item 
void \hyperlink{main_8cpp_ae4ea9570be601d182fa473c7ca431852}{task\+Two} (std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$ the\+Semaphore)
\begin{DoxyCompactList}\small\item\em displays a message second. By calling the Wait function the code will not run until the Signal function is called from the task\+One function \end{DoxyCompactList}\item 
int \hyperlink{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}{main} (void)
\begin{DoxyCompactList}\small\item\em The eponymous main function. \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Detailed Description}
A documented file. 

Craig Lawlor Feb 29019 

\subsection{Function Documentation}
\mbox{\Hypertarget{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}\label{main_8cpp_a840291bc02cba5474a4cb46a9b9566fe}} 
\index{main.\+cpp@{main.\+cpp}!main@{main}}
\index{main@{main}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{main()}{main()}}
{\footnotesize\ttfamily int \hyperlink{classmain}{main} (\begin{DoxyParamCaption}\item[{void}]{ }\end{DoxyParamCaption})}



The eponymous main function. 

$<$ Launch the threads

$<$ Wait for the threads to finish \mbox{\Hypertarget{main_8cpp_a2b4729d561c345111ccab970fe11e229}\label{main_8cpp_a2b4729d561c345111ccab970fe11e229}} 
\index{main.\+cpp@{main.\+cpp}!task\+One@{task\+One}}
\index{task\+One@{task\+One}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{task\+One()}{taskOne()}}
{\footnotesize\ttfamily void task\+One (\begin{DoxyParamCaption}\item[{std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$}]{the\+Semaphore,  }\item[{int}]{delay }\end{DoxyParamCaption})}



Displays a message first. To allow the task\+Two function to run its code this function must call the Signal. 


\begin{DoxyParams}{Parameters}
{\em the\+Semaphore} & to call the Wait() and Signal() functions of the \hyperlink{class_semaphore}{Semaphore} calss \\
\hline
{\em delay} & time to sleep \\
\hline
\end{DoxyParams}
\mbox{\Hypertarget{main_8cpp_ae4ea9570be601d182fa473c7ca431852}\label{main_8cpp_ae4ea9570be601d182fa473c7ca431852}} 
\index{main.\+cpp@{main.\+cpp}!task\+Two@{task\+Two}}
\index{task\+Two@{task\+Two}!main.\+cpp@{main.\+cpp}}
\subsubsection{\texorpdfstring{task\+Two()}{taskTwo()}}
{\footnotesize\ttfamily void task\+Two (\begin{DoxyParamCaption}\item[{std\+::shared\+\_\+ptr$<$ \hyperlink{class_semaphore}{Semaphore} $>$}]{the\+Semaphore }\end{DoxyParamCaption})}



displays a message second. By calling the Wait function the code will not run until the Signal function is called from the task\+One function 


\begin{DoxyParams}{Parameters}
{\em the\+Semaphore} & to call the Wait() and Signal() functions of the \hyperlink{class_semaphore}{Semaphore} calss \\
\hline
\end{DoxyParams}
