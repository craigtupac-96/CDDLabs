/*! \file main.cpp
    \brief A documented file.

    Craig Lawlor
    Feb 29019
*/
#include "Semaphore.h"
#include <iostream>
#include <thread>
#include <chrono>
/*! \mainpage Rendezvous Lab
  The code in this lab uses a semaphores to make the first thread to arrive wait for the second before leaving
*/
/*! \class main
    \brief An Implementation of a Rendezvous using Semaphores

   Uses C++11 features such as mutex and condition variables to implement an example of a rendezvous for threads

*/
/*! \fn taskOne(std::shared_ptr<Semaphore> firstSem,std::shared_ptr<Semaphore>  secondSem, int delay)
    \brief displays a message that is split in to 2 sections to show how a rendezvous works 
    \param firstSem the first shared semahore
    \param secondSem the second shared semaphore
    \param delay holds the time to delay
*/
void taskOne(std::shared_ptr<Semaphore> firstSem,std::shared_ptr<Semaphore>  secondSem, int delay){
  std::this_thread::sleep_for(std::chrono::seconds(delay));
  std::cout <<"Task One has arrived! "<< std::endl;
  firstSem->Signal();
  std::cout << "Task One has left!"<<std::endl;
}
/*! displays a message that is split in to 2 sections to show how a rendezvous works*/
/*! \fn taskTwo(std::shared_ptr<Semaphore> firstSem, std::shared_ptr<Semaphore> secondSem, int delay)
    \brief displays a message that is split in to 2 sections to show how a rendezvous worksdisplays a message that is split in to 2 sections to show how a rendezvous work 
    \param firstSem the first shared semahore
    \param secondSem the second shared semaphore
    \param delay holds the time to delay
*/
void taskTwo(std::shared_ptr<Semaphore> firstSem, std::shared_ptr<Semaphore> secondSem, int delay){
  std::this_thread::sleep_for(std::chrono::seconds(delay));
  std::cout <<"Task Two has arrived "<<std::endl;
  firstSem->Wait();
  std::cout << "Task Two has left "<<std::endl;
}

/*! \fn int main()
    \brief The eponymous main function
    \var threadOne the first thread
    \var threadTwo the second thread
    \var sem1
    \var sem2
    \var taskOneDelay an int to hold the first delay time
    \var taskTwoDelay an int to hold the second delay time
    
     Creates two 
*/
int main(void){
  std::thread threadOne, threadTwo;
  std::shared_ptr<Semaphore> sem1( new Semaphore);
  std::shared_ptr<Semaphore> sem2( new Semaphore);
  int taskOneDelay=5;
  int taskTwoDelay=1;
  /**< Launch the threads  */
  threadOne=std::thread(taskTwo,sem1,sem2,taskTwoDelay);
  threadTwo=std::thread(taskOne,sem1,sem2,taskOneDelay);
  std::cout << "Launched from the main\n";
  threadOne.join();
  threadTwo.join();
  return 0;
}
